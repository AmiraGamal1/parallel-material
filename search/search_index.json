{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"How to run c++ code locally","text":"<p>Objective: </p> <ul> <li>To setup your development environment.</li> <li>To compile and run an cpp parallel program.</li> </ul> <p>Software: </p> <ul> <li>MinGW Installation Manager or MinGW-w64</li> <li>Visual Studio code</li> </ul>"},{"location":"#installing-g-compiler","title":"Installing g++ compiler","text":"<p>In this tutorial, I explain two ways to install g++ compiler:</p> <ul> <li> <p>MinGW (Minimalist GUN for Windows, originally called mingw32) is a native Windows port of the GNU Compiler Collection (GCC) that provides header files and free distributable import libraries for creating native Windows applications. Note that all the programs produced under MinGW are 32-bit executables, but they can be used in 32-bit and 64-bit versions of Windows.</p> </li> <li> <p>MinGW-w64 is an advancement of the original MinGW project. It was forked in 2007 in order to provide support for 64 bits and new APIs. Note that MinGW-w64 supports binaries native to Windows 64-bit and 32-bit operating systems.</p> </li> </ul>"},{"location":"#installing-g-compiler-use-mingw-installation-manager","title":"Installing g++ compiler use MinGW Installation Manager","text":"<ol> <li>Visit the website MinGW and click on Download.</li> <li>Once the file is downloaded. Open the <code>mingw-get-setup.exe</code> file then click on [Install] </li> <li>I am going to install MinGW under <code>C:</code> directory, click on [continue] </li> <li>Wait MinGW to install then click on [continue] </li> <li>In <code>MinGW Installation Manager</code> select <code>mingw32-base-bin</code> by clicking on the square control beside the package name. You should see as below:  </li> <li>Also, you should select all the following package as below: </li> <li>On the menu bar, select <code>Installation</code> <code>Apply Changes</code> as shown below: </li> <li>Click on the <code>Apply</code> as shown below:      </li> <li>Finally, After the installation finish click on <code>Close</code></li> <li>After that, go to the installation directory [in my case <code>C:\\MinGW\\bin</code>] and copy the directory of the bin folder as shown below: </li> <li>Go to the setting and write <code>env</code> on the search bar, select <code>Edit environment variables for your account</code> as shown below: </li> <li>Select <code>path</code> and click on <code>Edit</code> as shown below: </li> <li>Click on <code>New</code> to add your copied MinGW path [ in my case <code>C:\\MinGW\\bin</code> ] </li> <li>Finally click on OK  OK</li> </ol>"},{"location":"#installing-g-compiler-use-mingw-w64","title":"Installing g++ compiler use MinGW-w64","text":"<p>MinGW-w64 comes in three flavors for Windows: GitHub, WinLibs, or MSYS2. Here we will use the WinLibs flavor (a standalone build of GCC and MinGW-w64 for Windows).</p> <ol> <li>Visit the website WinLibs. Here we will download release versions of UCRT (Univarsal C Runtime) with the threading library POSIX threads/pthread.h. Under UCRT, select the GCC version with POSIX threads. For example, click on Win32 (without LLVM/Clang/LLD/LLDB) or Win64 (without LLVM/Clang/LLD/LLDB) based on your system as shown below, or download GCC 14.2.0 (with POSIX threads) directly from here: Win32 or Win64</li> <li>Extract the Winlibs downloaded file to the <code>C:</code> directory, as shown below.</li> <li>Copy the directory of the bin folder <code>C:\\mingw64\\bin</code> in my case, then add it to the environment variable path, following the same steps from 11 to 14 on Installing g++ compiler, use MinGW Installation Manager</li> </ol>"},{"location":"#installing-visual-studio-code","title":"Installing Visual Studio Code","text":"<ol> <li>Visit the website VS code Click on <code>Windows</code> to download VS code for Windows, as shown below </li> <li>After the download finished open the <code>VSCodeUserSetup</code> executable file, when it open select <code>I accept the agreement</code> then click on <code>Next</code> </li> <li> <p>Select all the option as seen below </p> </li> <li> <p>Finally we are ready to install the VS code, click on <code>install</code> and wait untail the setup finish</p> </li> <li>On the Vs code, on the left-hand side, click on <code>extension</code> then in the search bar, write <code>C++</code> select <code>C/C++</code> and click on <code>Install</code> as shown below </li> <li>Close <code>Vs code</code></li> </ol>"},{"location":"#running-c-parallel-code-on-vs-code","title":"Running C++ parallel code on VS code","text":"<ol> <li>Right click on the Windows button <code>or press windows + x</code> then select <code>Windows PowerShell Admin</code> as shown below </li> <li>Navigate to <code>D:</code> directory by write <code>cd d:</code> as shown below </li> <li>Then make directory named <code>Parallel-codes</code> [<code>mkdir Parallel-codes</code>] as shown below </li> <li>Then navigate to the directory </li> <li>Write <code>code .</code> to open VS code on the <code>d:\\Parallel-codes</code> directory      </li> <li>After <code>VS code</code> open, create new file name it <code>fibo.cpp</code> and write Fibonacci code in the end of Lab(1) save <code>fibo.cpp</code>,then on the top bar select on <code>\u2026</code>  Terminal  New Terminal. As shown below </li> <li>Before to add <code>pthread.h</code> header file you need to install <code>pthreads</code> library also known as <code>POSIX</code> threads, which is provides a way to create and manage threads in multi-threaded program. To install the library use <code>mingw-get</code> command and write <code>mingw-get install pthreads</code> on the terminal Skip this step if you are installing g++ compiler use MinGW-w64 </li> <li>Compile the <code>fibo.cpp</code> program. Write this command: <code>g++ -o fibo -pthread fibo.cpp</code> on the terminal. Let us explain the command in detail: <code>g++</code>: GUN Compiler Collection for c++ <code>-o fibo</code>: <code>-o</code> flag to create the output file named <code>fibo</code> <code>-pthread</code> flag: tell the compiler to link with the <code>pthread</code> library <code>fibo.cpp</code>: the name of the program Note that: if you want to use <code>openMP</code> on your program [<code>omp.h</code> header file]. You need to add [<code>-fopenmp</code>] flag [<code>g++ -o out \u2013fopenmp program.cpp</code>] to compile the program.      </li> <li>Finally write <code>./fibo</code> on the terminal to run <code>fibo</code> program </li> </ol>"}]}